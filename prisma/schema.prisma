generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//____________________________________________

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  photoUrl  String?
  lastLogin DateTime?

  // (CAB / CASCOTEC / CLIENT)
  userType UserType

  roles UserRoleAssignment[]

  cabId Int?
  cab   Cab? @relation(fields: [cabId], references: [id], onDelete: Cascade)

  clientProfile    ClientProfile?
  auditorProfile   AuditorProfile?
  committeeProfile CommitteeProfile?

  serviceRequests ServiceRequest[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([email])
  @@index([userType])
}

enum UserType {
  CAB
  CASCOTEC
  CLIENT
}

enum UserRole {
  // CAB Roles
  CAB_ADMIN
  CAB_CUSTOMER_SERVICE
  CAB_SALES
  CAB_ACCOUNTANT
  CAB_CERTIFICATION_MANAGER
  CAB_TECHNICAL_MANAGER
  CAB_LEAD_AUDITOR
  CAB_AUDITOR
  CAB_TRAINEE
  CAB_CEO
  CAB_COMMITTEE_MEMBER

  // CASCOTEC Roles
  CASCOTEC_ADMIN
  CASCOTEC_CUSTOMER_SUPPORT
  CASCOTEC_SALES
  CASCOTEC_ACCOUNT_MANAGER
  CASCOTEC_CFO
  CASCOTEC_CEO

  // CLIENT Role
  CLIENT_USER
}

model AuditorProfile {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  coveredSchemes  String[] // ["ISO 9001", "ISO 14001"]
  coveredSectors  String[] // ["IAF 28", "IAF 34"]
  validationDate  DateTime?
  nextWitnessDate DateTime?
  employmentType  EmploymentType?
}

enum EmploymentType {
  FULL_TIME
  FREELANCER
}

model CommitteeProfile {
  id            Int           @id @default(autoincrement())
  userId        Int           @unique
  user          User          @relation(fields: [userId], references: [id])
  committeeType CommitteeType
  committeeName String?
  coveredSector String?
}

enum CommitteeType {
  COMPLAINTS
  CERTIFICATION
  IMPARTIALITY
}

model ClientProfile {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])
  cabId  Int?
  cab    Cab? @relation(fields: [cabId], references: [id])

  companyName    String
  companyAddress String
  contactPerson  String
  invitationCode String?

  serviceRequests ServiceRequest[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserRoleAssignment {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id])

  role  UserRole
  cabId Int?
  cab   Cab?     @relation(fields: [cabId], references: [id], onDelete: Cascade)

  assignedAt DateTime @default(now())

  @@index([role])
  @@index([cabId])
}

//_________________________________________________________________________

model Scheme {
  id              Int              @id @default(autoincrement())
  name            String           @unique // e.g. "ISO 9001"
  sectors         Sector[] // related sectors
  cabSchemes      CabScheme[] // CAB-Scheme relations
  serviceRequests ServiceRequest[]
  createdAt       DateTime         @default(now())
}

model Sector {
  id           Int     @id @default(autoincrement())
  schemeId     Int
  name         String // e.g. "Mechanical"
  iafCode      String // e.g. "17"
  description  String?
  criticalCode String?

  serviceRequests     ServiceRequest[]
  scheme              Scheme               @relation(fields: [schemeId], references: [id], onDelete: Cascade)
  cabTechnicalSectors CabTechnicalSector[]
}

model CabScheme {
  id       Int    @id @default(autoincrement())
  cabId    Int
  schemeId Int
  cab      Cab    @relation(fields: [cabId], references: [id], onDelete: Cascade)
  scheme   Scheme @relation(fields: [schemeId], references: [id], onDelete: Cascade)
}

model CabTechnicalSector {
  id       Int    @id @default(autoincrement())
  cabId    Int
  sectorId Int
  cab      Cab    @relation(fields: [cabId], references: [id], onDelete: Cascade)
  sector   Sector @relation(fields: [sectorId], references: [id], onDelete: Cascade)
}

//______________
model ServiceRequest {
  id              Int  @id @default(autoincrement())
  cabId           Int
  clientProfileId Int
  schemeId        Int
  sectorId        Int?

  cab           Cab           @relation(fields: [cabId], references: [id])
  clientProfile ClientProfile @relation(fields: [clientProfileId], references: [id])
  scheme        Scheme        @relation(fields: [schemeId], references: [id])
  sector        Sector?       @relation(fields: [sectorId], references: [id])

  description String?
  documents   Json?

  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model Cab {
  id Int @id @default(autoincrement())

  // Basic Info
  name      String  @unique
  country   String
  hqAddress String
  branches  String?

  // Accreditation
  accreditationBody String
  slug              String    @unique
  shareableLink     String?
  validTo           DateTime?

  // Relations
  schemes             CabScheme[] // Schemes & Standards
  technicalSectors    CabTechnicalSector[] // Technical Sectors
  users               User[]
  serviceRequests     ServiceRequest[]
  userRoleAssignments UserRoleAssignment[]

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ClientProfile ClientProfile[]
}
